//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LengSchool11.Entity
{
    using LengSchool11.Classes;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Client
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Client()
        {
            this.ClientService = new HashSet<ClientService>();
            this.Tag = new HashSet<Tag>();
        }
    
        public int ID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Patronymic { get; set; }
        public Nullable<System.DateTime> Birthday { get; set; }
        public System.DateTime RegistrationDate { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public int GenderCode { get; set; }
        public string PhotoPath { get; set; }
    
        public virtual Gender Gender { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ClientService> ClientService { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Tag> Tag { get; set; }

        public string GetGender
        {
            get
            {
                return this.Gender.Name.ToString();
            }
        }
        public System.DateTime LastService
        {
            get
            {
                return Helper.GetContext().ClientService
                                    .Where(c => c.ClientID == this.ID)
                                    .OrderByDescending(c => c.StartTime)
                                    .Select(c => c.StartTime)
                                    .FirstOrDefault();
            }
        }
        public int CountService
        {
            get
            {
                var cl = Helper.GetContext().ClientService.Where(x => x.ClientID == this.ID).ToList();
                return cl.Count();
            }
        }
        public List<Tag> Tags
        {
            get
            {
                return this.Tag.ToList();
            }
        }
        public List<ClientService> ServiceList
        {
            get
            {
                return this.ClientService.ToList();
            }
        }

        public string ImgPath
        {
            get
            {
                var path = "/Resourses/Клиенты/" + this.PhotoPath.ToString();
                return path;
            }
        }
    }
}
